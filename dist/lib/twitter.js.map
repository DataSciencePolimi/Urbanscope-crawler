{"version":3,"sources":["lib/twitter.js"],"names":[],"mappings":";;;;;;;;;;;;;;;qBAqCyB,KAAK;iBAAL,KAAK;;;;;;sBAjCX,QAAQ;;;;uBACP,MAAM;;;;uBACN,UAAU;;;;;;uBAGV,4BAA4B;;;;AAThD,YAAY,CAAC;;;AAYb,IAAM,WAAW,GAAG,GAAG,CAAC;AACxB,IAAM,YAAY,GAAG,GAAG,CAAC;AACzB,IAAM,MAAM,GAAG,IAAI,GAAC,EAAE,GAAC,EAAE,CAAC;;;;AAK1B,IAAI,GAAG,GAAG,oBAAO,YAAY,CAAE;AAC7B,MAAI,EAAE,SAAS;AACf,OAAK,EAAE,OAAO,EACf,CAAE,CAAC;AACJ,IAAI,GAAG,GAAG,8CAAsB,CAAC;AACjC,GAAG,CAAC,KAAK,CAAE,EAAE,OAAO,sBAAA,EAAE,EAAE,gBAAgB,CAAE,CAAC;;;;;;;AAO3C,GAAG,GAAG,qBAAQ,YAAY,CAAE,GAAG,CAAE,CAAC;AAMnB,SAAU,KAAK,CAAE,GAAG,EAAE,GAAG,EAAE,MAAM;MAC1C,OAAO,EAIL,MAAM;;;;AAJR,eAAO,QAAM,GAAG,SAAI,GAAG,SAAI,MAAM;;AACrC,WAAG,CAAC,KAAK,CAAE,aAAa,EAAE,OAAO,CAAE,CAAC;;;;eAGf,GAAG,CAAC,QAAQ,CAAE,eAAe,EAAE,EAAE,OAAO,EAAP,OAAO,EAAE,KAAK,EAAE,WAAW,EAAE,CAAE;;;AAA/E,cAAM;;AACV,WAAG,CAAC,KAAK,CAAE,qBAAqB,EAAE,MAAM,CAAC,MAAM,CAAE,CAAC;;;;;;;;;AAGlD,WAAG,CAAC,KAAK,iBAAO,0BAA0B,EAAE,eAAI,OAAO,CAAE,CAAC;;cAEtD,eAAI,IAAI,IAAI,eAAI,IAAI,KAAG,EAAE,CAAA;;;;;;AAC3B,WAAG,CAAC,KAAK,CAAE,wBAAwB,CAAE,CAAC;;eAChC,qBAAQ,KAAK,CAAE,MAAM,CAAE;;;;;;;CAGlC","file":"lib/twitter.js","sourcesContent":["'use strict';\r\n// Load system modules\r\n\r\n// Load modules\r\nimport bunyan from 'bunyan';\r\nimport Twitter from 'twit';\r\nimport Promise from 'bluebird';\r\n\r\n// Load my modules\r\nimport apiKeys from '../../config/api-keys.json';\r\n\r\n// Constant declaration\r\nconst MAX_RESULTS = 100;\r\nconst MAX_REQUESTS = 180; // 450;\r\nconst WINDOW = 1000*60*15; // 15 min;\r\n// const WINDOW = 1000*30; // 30 sec;\r\n\r\n\r\n// Module variables declaration\r\nlet log = bunyan.createLogger( {\r\n  name: 'cralwer',\r\n  level: 'trace',\r\n} );\r\nlet api = new Twitter( apiKeys );\r\nlog.trace( { apiKeys }, 'Using api keys' );\r\n\r\n// Module functions declaration\r\n\r\n// Module class declaration\r\n\r\n// Module initialization (at first load)\r\napi = Promise.promisifyAll( api );\r\n\r\n\r\n// Entry point\r\n\r\n// Exports\r\nexport default function* query( lat, lon, radius ) {\r\n  let geocode = `${lat},${lon},${radius}km`;\r\n  log.trace( 'Geocode: %s', geocode );\r\n\r\n  try {\r\n    let tweets = yield api.getAsync( 'search/tweets', { geocode, count: MAX_RESULTS } );\r\n    log.debug( 'Retrieved %d tweets', tweets.length );\r\n\r\n  } catch( err ) {\r\n    log.error( err, 'Twitter query failed: %s', err.message );\r\n\r\n    if( err.code && err.code===88 ) { // Rate limit reached\r\n      log.debug( 'Limit reached, waiting' );\r\n      yield Promise.delay( WINDOW );\r\n    }\r\n  }\r\n}\r\n\r\n//  50 6F 77 65 72 65 64  62 79  56 6F 6C 6F 78"],"sourceRoot":"/source/"}