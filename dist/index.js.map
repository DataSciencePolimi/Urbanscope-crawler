{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;;iBA8BU,SAAS;;;;kBA5BJ,IAAI;;;;oBACF,MAAM;;;;;;kBAGR,IAAI;;;;sBACA,QAAQ;;;;oBACV,MAAM;;;;+BACN,mBAAmB;;;;;;yBAGnB,cAAc;;;;qBACwB,UAAU;;oCAC1C,4BAA4B;;;;8BAClC,qBAAqB;;;;AAftC,YAAY,CAAC;;;AAmBb,IAAM,SAAS,GAAG,kBAAK,IAAI,CAAE,SAAS,EAAE,IAAI,EAAE,QAAQ,EAAE,sBAAsB,CAAE,CAAC;AACjF,IAAM,WAAW,GAAG,kBAAK,IAAI,CAAE,SAAS,EAAE,IAAI,EAAE,QAAQ,EAAE,aAAa,CAAE,CAAC;;;AAG1E,IAAI,GAAG,GAAG,oBAAO,YAAY,CAAE;AAC7B,MAAI,EAAE,SAAS;AACf,OAAK,EAAE,OAAO,EACf,CAAE,CAAC;;;AAIJ,SAAU,SAAS,CAAE,KAAK;MACpB,MAAM,EAIN,YAAY,kFAEP,KAAK,qBAEJ,KAAK,EAAE,GAAG,EACZ,OAAO,EAMP,IAAI;;;;;AAfR,cAAM,GAAG,kBAAK,iBAAiB,CAAE,KAAK,CAAC,GAAG,CAAE,UAAC,CAAC,EAAC,KAAK,EAAK;AAC3D,iBAAO,kBAAK,KAAK,CAAE,CAAC,CAAC,QAAQ,CAAC,WAAW,EAAE,EAAE,KAAK,EAAL,KAAK,EAAE,CAAE,CAAC;SACxD,CAAE,CAAE;AAED,oBAAY,GAAG,kBAAK,GAAG,CAAE,MAAM,+BAAQ,QAAQ,EAAE,KAAK,CAAE;;;;;iCAE1C,YAAY,CAAC,QAAQ;;;;;;;;AAA9B,aAAK;;4BAEW,KAAK,CAAC,UAAU;AAA/B,aAAK,qBAAL,KAAK;AAAE,WAAG,qBAAH,GAAG;AACZ,eAAO,GAAG,KAAK,CAAE,KAAK,CAAE;;;AAG5B,eAAO,CAAC,GAAG,GAAG,GAAG,CAAC;;AAGd,YAAI,GAAG,2BAAU,OAAO,CAAE;;eACxB,IAAI,CAAC,IAAI,EAAE;;;;;;;;;;AAGjB,YAAI,gBAAI,IAAI,KAAG,KAAK,EAAG;AACrB,aAAG,CAAC,KAAK,CAAE,sBAAsB,CAAE,CAAC;SACrC,MAAM;AACL,aAAG,CAAC,KAAK,kBAAO,oBAAoB,CAAE,CAAC;SACxC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAGN;AACD,SAAS,SAAS,CAAE,IAAI,EAAE,KAAK,EAAG;AAChC,MAAI,MAAM,GAAG;AACX,QAAI,EAAJ,IAAI;AACJ,SAAK,EAAL,KAAK,EACN,CAAC;;AAEF,MAAI,IAAI,GAAG,IAAI,CAAC,SAAS,CAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAE,CAAC;AAC7C,kBAAG,aAAa,CAAE,WAAW,EAAE,IAAI,EAAE,MAAM,CAAE,CAAC;;AAE9C,SAAO,MAAM,CAAC;CACf;;;;;;;AASD,yCAAI;MAME,MAAM,EAUN,KAAK,EAOH,EAAE,EAIF,IAAI,EAON,MAAM,YAEJ,KAAK,EAIF,SAAS,EACZ,UAAU,EACV,MAAM,EAGD,UAAU,EAEb,MAAM,EACN,GAAG,EACH,GAAG,EACH,MAAM,EAGJ,KAAK;;;;;;eAlDT,OAnEC,IAAI,EAmEM;;;AAGb,cAAM;;AACV,YAAI;AACF,gBAAM,GAAG,OAAO,CAAE,WAAW,CAAE,CAAC;AAChC,aAAG,CAAC,IAAI,CAAE,uBAAuB,EAAE,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,KAAK,CAAE,CAAC;SAChE,CAAC,OAAO,GAAG,EAAG;AACb,aAAG,CAAC,IAAI,CAAE,kCAAkC,CAAE,CAAC;AAC/C,gBAAM,GAAG,SAAS,CAAE,CAAC,EAAE,CAAC,CAAE,CAAC;SAC5B;;AAGG,aAAK;;AACT,YAAI;AACF,aAAG,CAAC,KAAK,CAAE,wBAAwB,EAAE,SAAS,CAAE,CAAC;AACjD,eAAK,GAAG,OAAO,CAAE,SAAS,CAAE,CAAC;AAC7B,aAAG,CAAC,KAAK,CAAE,aAAa,CAAE,CAAC;SAC5B,CAAC,OAAO,GAAG,EAAG;AACb,aAAG,CAAC,IAAI,CAAE,kBAAkB,CAAE,CAAC;AAC3B,YAAE,GAAG,6BAAK,IAAI,mCAAc;;AAChC,eAAK,GAAG,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAE,UAAA,CAAC;mBAAI,CAAC,CAAC,QAAQ,CAAC,WAAW;WAAA,CAAE,CAAC;AACvD,aAAG,CAAC,KAAK,CAAE,oBAAoB,EAAE,KAAK,CAAC,MAAM,CAAE,CAAC;;AAE5C,cAAI,GAAG,IAAI,CAAC,SAAS,CAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAE;;AAE3C,0BAAG,aAAa,CAAE,SAAS,EAAE,IAAI,EAAE,MAAM,CAAE,CAAC;SAC7C;;AAIG,cAAM,GAAG,OAAO,CAAC,IAAI,CAAE,CAAC,CAAE;;AAC9B,WAAG,CAAC,KAAK,CAAE,qBAAqB,EAAE,MAAM,CAAE,CAAC;mBAC3B,OAAO,CAAE,WAAW,GAAC,MAAM,CAAE;AAAvC,aAAK,YAAL,KAAK;AAIF,iBAAS,GAAC,MAAM,CAAC,IAAI;;;cAAE,SAAS,GAAC,kCAAW,MAAM,CAAA;;;;;AACrD,kBAAU,GAAG,kCAAY,SAAS,CAAE,CAAC,GAAG;AACxC,cAAM,GAAG,KAAK,CAAE,SAAS,CAAE;;AAC/B,WAAG,CAAC,KAAK,CAAE,gCAAgC,EAAE,SAAS,EAAE,MAAM,CAAC,MAAM,CAAE,CAAC;;AAE/D,kBAAU,GAAC,MAAM,CAAC,KAAK;;;cAAE,UAAU,GAAC,MAAM,CAAC,MAAM,CAAA;;;;;AAEpD,cAAM,GAAG,MAAM,CAAE,UAAU,CAAE;AAC7B,WAAG,GAAG,MAAM,CAAE,CAAC,CAAE;AACjB,WAAG,GAAG,MAAM,CAAE,CAAC,CAAE;AACjB,cAAM,GAAG,UAAU,GAAC,IAAI;;;eAGR,KAAK,CAAE,GAAG,EAAE,GAAG,EAAE,MAAM,CAAE;;;AAAvC,aAAK;;AACT,WAAG,CAAC,KAAK,CAAE,mBAAmB,EAAE,KAAK,CAAC,MAAM,CAAE,CAAC;;;eAEzC,SAAS,CAAE,KAAK,CAAE;;;;;;;;;;AAGxB,YAAI,gBAAI,IAAI,KAAG,cAAc,EAAG;AAC9B,aAAG,CAAC,KAAK,CAAE,mBAAmB,EAAE,gBAAI,OAAO,CAAE,CAAC;SAC/C;;AAED,WAAG,CAAC,KAAK,kBAAO,kBAAkB,EAAE,gBAAI,OAAO,CAAE,CAAC;;;;;;AAIlD,iBAAS,CAAE,SAAS,EAAE,UAAU,CAAE,CAAC;;;;AAtBqB,kBAAU,EAAE;;;;;AAyBxE,WAAG,CAAC,KAAK,CAAE,cAAc,EAAE,SAAS,CAAE,CAAC;AACvC,cAAM,CAAC,KAAK,GAAG,CAAC,CAAC;;;AA/B0C,iBAAS,EAAE;;;;;AAiCxE,WAAG,CAAC,KAAK,CAAE,gBAAgB,CAAE,CAAC;AAC9B,eA1I0B,KAAK,EA0InB,CAAC;;;;;;;CACd,EAAE,SACG,CAAE,UAAA,GAAG,EAAI;AACb,KAAG,CAAC,KAAK,CAAE,GAAG,EAAE,aAAa,CAAE,CAAC;AAChC,SA9I0B,KAAK,EA8InB,CAAC;CACd,CAAE,CACF,IAAI,CAAE,YAAK;AACV,KAAG,CAAC,IAAI,CAAE,KAAK,CAAE,CAAC;AAClB,SAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;CACjB,CAAE,CAAC","file":"index.js","sourcesContent":["'use strict';\r\n// Load system modules\r\nimport fs from 'fs';\r\nimport path from 'path';\r\n\r\n// Load modules\r\nimport co from 'co';\r\nimport bunyan from 'bunyan';\r\nimport turf from 'turf';\r\nimport grid from 'node-geojson-grid';\r\n\r\n// Load my modules\r\nimport Post from './model/post';\r\nimport { open as openMongo, close as closeMongo } from './model/';\r\nimport gridConfig from '../config/grid-config.json';\r\nimport nils from '../config/nils.json';\r\n\r\n\r\n// Constant declaration\r\nconst GRID_FILE = path.join( __dirname, '..', 'config', 'generated-grids.json' );\r\nconst STATUS_FILE = path.join( __dirname, '..', 'config', 'status.json' );\r\n\r\n// Module variables declaration\r\nlet log = bunyan.createLogger( {\r\n  name: 'cralwer',\r\n  level: 'trace',\r\n} );\r\n\r\n\r\n// Module functions declaration\r\nfunction* savePosts( posts ) {\r\n  let points = turf.featurecollection( posts.map( (p,index) => {\r\n    return turf.point( p.location.coordinates, { index } );\r\n  } ) );\r\n\r\n  let taggedPoints = turf.tag( points, nils, 'ID_NIL', 'nil' );\r\n\r\n  for( let point of taggedPoints.features ) {\r\n    try {\r\n      let { index, nil } = point.properties;\r\n      let rawPost = posts[ index ];\r\n\r\n      // Set the nil\r\n      rawPost.nil = nil;\r\n\r\n      // Create and save the post\r\n      let post = new Post( rawPost );\r\n      yield post.save();\r\n\r\n    } catch( err ) {\r\n      if( err.code===11000 ) {\r\n        log.error( 'Post already present' );\r\n      } else {\r\n        log.error( err, 'Cannot insert post' );\r\n      }\r\n    }\r\n  }\r\n}\r\nfunction saveState( grid, coord ) {\r\n  let status = {\r\n    grid,\r\n    coord,\r\n  };\r\n\r\n  let json = JSON.stringify( status, null, 2 );\r\n  fs.writeFileSync( STATUS_FILE, json, 'utf8' );\r\n\r\n  return status;\r\n}\r\n\r\n// Module class declaration\r\n\r\n\r\n// Module initialization (at first load)\r\n\r\n\r\n// Entry point\r\nco( function*() {\r\n\r\n  // Setup mongo\r\n  yield openMongo();\r\n\r\n  // Load status file\r\n  let status;\r\n  try {\r\n    status = require( STATUS_FILE );\r\n    log.info( 'Status loaded %d - %d', status.grid, status.coord );\r\n  } catch( err ) {\r\n    log.info( 'Status not present, creating one' );\r\n    status = saveState( 0, 0 );\r\n  }\r\n\r\n  // Create/load the grid points\r\n  let grids;\r\n  try {\r\n    log.trace( 'Loading from file \"%s\"', GRID_FILE );\r\n    grids = require( GRID_FILE );\r\n    log.debug( 'Grid loaded' );\r\n  } catch( err ) {\r\n    log.info( 'Generating grids' );\r\n    let fc = grid.json( gridConfig );\r\n    grids = fc.features.map( f => f.geometry.coordinates );\r\n    log.trace( 'Generated %d grids', grids.length );\r\n\r\n    let json = JSON.stringify( grids, null, 2 );\r\n\r\n    fs.writeFileSync( GRID_FILE, json, 'utf8' );\r\n  }\r\n\r\n\r\n  // Load social\r\n  let social = process.argv[ 2 ];\r\n  log.trace( 'Loading module \"%s\"', social );\r\n  let { query } = require( './social/'+social );\r\n\r\n\r\n  // Cycle over the grids\r\n  for( let gridIndex=status.grid; gridIndex<gridConfig.length; gridIndex++ ) {\r\n    let currentMpp = gridConfig[ gridIndex ].mpp;\r\n    let points = grids[ gridIndex ];\r\n    log.debug( 'Current grid %d with %d points', gridIndex, points.length );\r\n\r\n    for( let coordIndex=status.coord; coordIndex<points.length; coordIndex++ ) {\r\n    // for( let coords of points ) {\r\n      let coords = points[ coordIndex ];\r\n      let lat = coords[ 1 ];\r\n      let lon = coords[ 0 ];\r\n      let radius = currentMpp/1000;\r\n\r\n      try {\r\n        let posts = yield query( lat, lon, radius );\r\n        log.trace( 'Returned %d posts', posts.length );\r\n\r\n        yield savePosts( posts );\r\n\r\n      } catch( err ) {\r\n        if( err.code==='ECONNREFUSED' ) {\r\n          log.error( 'Cannot connect %s', err.message );\r\n        }\r\n\r\n        log.error( err, 'Query failed: %s', err.message );\r\n\r\n      } finally {\r\n        // Save state\r\n        saveState( gridIndex, coordIndex );\r\n      }\r\n    }\r\n    log.debug( 'Done grid %d', gridIndex );\r\n    status.coord = 0; // Rest coodinates index\r\n  }\r\n  log.debug( 'Done all grids' );\r\n  closeMongo();\r\n} )\r\n.catch( err => {\r\n  log.fatal( err, 'NUOOOOOOOOO' );\r\n  closeMongo();\r\n} )\r\n.then( ()=> {\r\n  log.info( 'Bye' );\r\n  process.exit(0);\r\n} );\r\n\r\n//  50 6F 77 65 72 65 64  62 79  56 6F 6C 6F 78"],"sourceRoot":"/source/"}