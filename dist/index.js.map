{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["'use strict';\r\n// Load system modules\r\n\r\n// Load modules\r\nimport co from 'co';\r\nimport bunyan from 'bunyan';\r\nimport grid from 'node-geojson-grid';\r\n\r\n// Load my modules\r\nimport { open as openMongo, close as closeMongo } from './model/';\r\nimport gridConfig from '../config/grid-config.json';\r\n// import { query as twQuery } from './social/twitter';\r\n// import { query as igQuery } from './social/instagram';\r\n\r\n\r\n// Constant declaration\r\n\r\n\r\n// Module variables declaration\r\nlet log = bunyan.createLogger( {\r\n  name: 'cralwer',\r\n  level: 'trace',\r\n} );\r\n\r\n\r\n// Module functions declaration\r\nfunction* savePosts( posts ) {\r\n  for( let post of posts ) {\r\n    try {\r\n      log.trace( 'Saving post %s', post.get( 'id' ) );\r\n      yield post.save();\r\n    } catch( err ) {\r\n      if( err.code===11000 ) {\r\n        log.error( 'Post already present' );\r\n      } else {\r\n        log.error( err, 'Cannot insert post' );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Module class declaration\r\n\r\n\r\n// Module initialization (at first load)\r\n\r\n\r\n// Entry point\r\nco( function*() {\r\n\r\n  // Setup mongo\r\n  yield openMongo();\r\n\r\n\r\n  // Create the grid points\r\n  log.debug( 'Generating point grids' );\r\n  let fc = grid.json( gridConfig );\r\n  let grids = fc.features.map( f => f.geometry.coordinates );\r\n  log.trace( 'Generated %d grids', grids.length );\r\n\r\n  // Load social\r\n  let social = process.argv[ 2 ];\r\n  log.trace( 'Loading module \"%s\"', social );\r\n  /*\r\n  let socialMap = {\r\n    twitter: twQuery,\r\n    instagram: igQuery,\r\n  };\r\n  let query = socialMap[ social ];\r\n  */\r\n  let { query } = require( './social/'+social );\r\n\r\n  // Cycle over the grids\r\n  for( let idx=0; idx<gridConfig.length; idx++ ) {\r\n    let currentMpp = gridConfig[ idx ].mpp;\r\n    let points = grids[ idx ];\r\n    log.debug( 'Current grid %d with %d points', idx, points.length );\r\n\r\n    for( let coords of points ) {\r\n      let lat = coords[ 1 ];\r\n      let lon = coords[ 0 ];\r\n      let radius = currentMpp/1000;\r\n\r\n      try {\r\n        let posts = yield query( lat, lon, radius );\r\n        log.trace( 'Returned %d posts', posts.length );\r\n\r\n        yield savePosts( posts );\r\n\r\n      } catch( err ) {\r\n        if( err.code==='ECONNREFUSED' ) {\r\n          log.error( 'Cannot connect %s', err.message );\r\n        }\r\n\r\n        log.error( err, 'Query failed: %s', err.message );\r\n\r\n      }\r\n    }\r\n    log.debug( 'Done grid %d', idx );\r\n  }\r\n  log.debug( 'Done all grids' );\r\n} )\r\n.catch( err => {\r\n  log.fatal( err, 'NUOOOOOOOOO' );\r\n} )\r\n.then( () => {\r\n  closeMongo();\r\n  log.info( 'Bye' );\r\n} );\r\n\r\n//  50 6F 77 65 72 65 64  62 79  56 6F 6C 6F 78"],"sourceRoot":"/source/"}