{"version":3,"sources":["index.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;iBA0BH,SAAS;;;;;kBAtBJ,IAAI;;;;sBACA,QAAQ;;;;oBACV,mBAAmB;;;;;;yBAGd,UAAU;;;;0BACT,4BAA4B;;;;qBAC7B,kBAAkB;;;;;;;AAQxC,IAAI,GAAG,GAAG,oBAAO,YAAY,CAAE;AAC7B,MAAI,EAAE,SAAS;AACf,OAAK,EAAE,OAAO,EACf,CAAE,CAAC;;;AAIJ,SAAU,SAAS,CAAE,KAAK;sFACf,IAAI;;;;;;;;;iCAAI,KAAK;;;;;;;;AAAb,YAAI;;AACX,WAAG,CAAC,KAAK,CAAE,gBAAgB,EAAE,IAAI,CAAC,GAAG,CAAE,IAAI,CAAE,CAAE,CAAC;;eAC1C,IAAI,CAAC,IAAI,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAEpB;;;;;;;AAUD,GAAG,CAAC,KAAK,CAAE,wBAAwB,CAAE,CAAC;AACtC,IAAI,EAAE,GAAG,kBAAK,IAAI,yBAAc,CAAC;AACjC,IAAI,KAAK,GAAG,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAE,UAAA,CAAC;SAAI,CAAC,CAAC,QAAQ,CAAC,WAAW;CAAA,CAAE,CAAC;AAC3D,GAAG,CAAC,KAAK,CAAE,oBAAoB,EAAE,KAAK,CAAC,MAAM,CAAE,CAAC;;AAGhD,yCAAI;MAKO,GAAG,EACN,UAAU,EACV,MAAM,uFAGD,MAAM,EACT,GAAG,EACH,GAAG,EACH,MAAM,EACN,KAAK;;;;;;eAXP,wBAAW;;;AAER,WAAG,GAAC,CAAC;;;cAAE,GAAG,GAAC,wBAAW,MAAM,CAAA;;;;;AAC/B,kBAAU,GAAG,wBAAY,GAAG,CAAE,CAAC,GAAG;AAClC,cAAM,GAAG,KAAK,CAAE,GAAG,CAAE;;AACzB,WAAG,CAAC,KAAK,CAAE,iCAAiC,EAAE,GAAG,EAAE,MAAM,CAAC,MAAM,CAAE,CAAC;;;;;;kCAEhD,MAAM;;;;;;;;AAAhB,cAAM;AACT,WAAG,GAAG,MAAM,CAAE,CAAC,CAAE;AACjB,WAAG,GAAG,MAAM,CAAE,CAAC,CAAE;AACjB,cAAM,GAAG,UAAU,GAAC,IAAI;;eACV,OAlDf,KAAK,CAkDiB,GAAG,EAAE,GAAG,EAAE,MAAM,CAAE;;;AAAvC,aAAK;;AACT,WAAG,CAAC,KAAK,CAAE,mBAAmB,EAAE,KAAK,CAAC,MAAM,CAAE,CAAC;;;eAEzC,SAAS,CAAE,KAAK,CAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAZW,WAAG,EAAE;;;;;;;;;CAe7C,EAAE,CAAC","file":"index.js","sourcesContent":["'use strict';\r\n// Load system modules\r\n\r\n// Load modules\r\nimport co from 'co';\r\nimport bunyan from 'bunyan';\r\nimport grid from 'node-geojson-grid';\r\n\r\n// Load my modules\r\nimport initMongo from './model/';\r\nimport gridConfig from '../config/grid-config.json';\r\nimport { query } from './social/twitter';\r\n// import instagramApi from './social/instagram';\r\n\r\n\r\n// Constant declaration\r\n\r\n\r\n// Module variables declaration\r\nlet log = bunyan.createLogger( {\r\n  name: 'cralwer',\r\n  level: 'trace',\r\n} );\r\n\r\n\r\n// Module functions declaration\r\nfunction* savePosts( posts ) {\r\n  for( let post of posts ) {\r\n    log.trace( 'Saving post %s', post.get( 'id' ) );\r\n    yield post.save();\r\n  }\r\n}\r\n\r\n// Module class declaration\r\n\r\n\r\n// Module initialization (at first load)\r\n\r\n\r\n\r\n// Entry point\r\nlog.debug( 'Generating point grids' );\r\nlet fc = grid.json( gridConfig );\r\nlet grids = fc.features.map( f => f.geometry.coordinates );\r\nlog.trace( 'Generated %d grids', grids.length );\r\n\r\n\r\nco( function*() {\r\n\r\n  // Setup mongo\r\n  yield initMongo();\r\n\r\n  for( let idx=0; idx<gridConfig.length; idx++ ) {\r\n    let currentMpp = gridConfig[ idx ].mpp;\r\n    let points = grids[ idx ];\r\n    log.trace( 'Current grid: %d with %d points', idx, points.length );\r\n\r\n    for( let coords of points ) {\r\n      let lat = coords[ 1 ];\r\n      let lon = coords[ 0 ];\r\n      let radius = currentMpp/1000;\r\n      let posts = yield query( lat, lon, radius );\r\n      log.trace( 'Returned %d posts', posts.length );\r\n\r\n      yield savePosts( posts );\r\n    }\r\n  }\r\n} );\r\n\r\n//  50 6F 77 65 72 65 64  62 79  56 6F 6C 6F 78"],"sourceRoot":"/source/"}