{"version":3,"sources":["social/twitter.js"],"names":[],"mappings":"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","file":"social/twitter.js","sourcesContent":["'use strict';\r\n// Load system modules\r\n\r\n// Load modules\r\nimport moment from 'moment';\r\nimport bunyan from 'bunyan';\r\nimport Twitter from 'twit';\r\nimport Promise from 'bluebird';\r\n\r\n// Load my modules\r\nimport apiKeys from '../../config/twitter-keys.json';\r\nimport { Post } from '../model/post';\r\n\r\n\r\n// Constant declaration\r\nconst MAX_RESULTS = 100;\r\nconst MAX_REQUESTS = 180; // jshint ignore: line\r\nconst WINDOW = 1000*60*15; // 15 min;\r\n// const WINDOW = 1000*30; // 30 sec;\r\nconst COLLECTION_NAME = 'tweets';\r\nconst DATE_FORMAT = 'dd MMM DD HH:mm:ss ZZ YYYY';\r\n\r\n\r\n// Module variables declaration\r\nlet log = bunyan.createLogger( {\r\n  name: 'twitter',\r\n  level: 'trace',\r\n} );\r\nlet api = new Twitter( apiKeys );\r\nlog.trace( { apiKeys }, 'Using api keys' );\r\n\r\n\r\n\r\n// Module class declaration\r\nclass TwPost extends Post {\r\n  collection(){\r\n    return COLLECTION_NAME;\r\n  }\r\n}\r\n\r\n\r\n// Module functions declaration\r\nfunction wrap( tweet ) {\r\n  log.trace( 'Converting tweet %s', tweet.id_str ); // jshint ignore: line\r\n  let tags = [];\r\n  if( tweet.entities ) {\r\n    tags = tweet.entities.hashtags.map( h => h.text );\r\n  }\r\n  let date = moment( tweet.created_at, DATE_FORMAT, 'en' ); // jshint ignore: line\r\n\r\n  let post = new TwPost( {\r\n    id: tweet.id_str, // jshint ignore: line\r\n    text: tweet.text,\r\n    date: date.toDate(),\r\n    author: tweet.user.screen_name, // jshint ignore: line\r\n    authorId: tweet.user.id_str, // jshint ignore: line\r\n    tags: tags,\r\n    location: tweet.coordinates,\r\n    raw: tweet,\r\n  } );\r\n\r\n  return post;\r\n}\r\n\r\n\r\n\r\nfunction wrapAll( tweets ) {\r\n  log.trace( 'Wrapping %d tweets to posts', tweets.length );\r\n  return tweets.map( wrap );\r\n}\r\n\r\n\r\nfunction* query( lat, lon, radius ) {\r\n  let geocode = `${lat},${lon},${radius}km`;\r\n  log.trace( 'Geocode: %s', geocode );\r\n\r\n  try {\r\n    let [ data ] = yield api.getAsync( 'search/tweets', { geocode, count: MAX_RESULTS } );\r\n    let tweets = data.statuses;\r\n    log.debug( 'Retrieved %d tweets', tweets.length );\r\n    return yield wrapAll( tweets );\r\n  } catch( err ) {\r\n    log.error( err, 'Twitter query failed: %s', err.message );\r\n\r\n    if( err.code && err.code===88 ) { // Rate limit reached\r\n      log.debug( 'Limit reached, waiting' );\r\n      yield Promise.delay( WINDOW );\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// Module initialization (at first load)\r\napi = Promise.promisifyAll( api );\r\n\r\n\r\n// Entry point\r\n\r\n// Exports\r\nexport { TwPost as Model };\r\nexport { query };\r\n\r\n//  50 6F 77 65 72 65 64  62 79  56 6F 6C 6F 78"],"sourceRoot":"/source/"}