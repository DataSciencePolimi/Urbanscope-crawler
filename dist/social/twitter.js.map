{"version":3,"sources":["social/twitter.js"],"names":[],"mappings":"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","file":"social/twitter.js","sourcesContent":["'use strict';\n// Load system modules\n\n// Load modules\nimport moment from 'moment';\nimport bunyan from 'bunyan';\nimport Twitter from 'twit';\nimport Promise from 'bluebird';\n\n// Load my modules\nimport apiKeys from '../../config/twitter-keys.json';\n\n\n// Constant declaration\nconst MAX_RESULTS = 100;\nconst MAX_REQUESTS = 180; // jshint ignore: line\nconst WINDOW = 1000*60*15; // 15 min;\n// const WINDOW = 1000*30; // 30 sec;\n// const COLLECTION_NAME = 'tweets';\nconst SOCIAL = 'twitter';\nconst DATE_FORMAT = 'dd MMM DD HH:mm:ss ZZ YYYY';\n\n\n// Module variables declaration\nlet log = bunyan.createLogger( {\n  name: SOCIAL,\n  level: 'trace',\n} );\nlet api = new Twitter( apiKeys );\nlog.trace( { apiKeys }, 'Using api keys' );\n\n\n\n// Module class declaration\n\n\n// Module functions declaration\nfunction wrap( tweet ) {\n  log.trace( 'Converting tweet %s', tweet.id_str ); // jshint ignore: line\n  let tags = [];\n  if( tweet.entities ) {\n    tags = tweet.entities.hashtags.map( h => h.text );\n  }\n  let date = moment( tweet.created_at, DATE_FORMAT, 'en' ); // jshint ignore: line\n\n  let post = {\n    source: SOCIAL,\n    id: tweet.id_str, // jshint ignore: line\n    text: tweet.text,\n    date: date.toDate(),\n    location: tweet.coordinates,\n    author: tweet.user.screen_name, // jshint ignore: line\n    authorId: tweet.user.id_str, // jshint ignore: line\n    tags: tags,\n    lang: tweet.lang,\n    raw: tweet,\n  };\n\n  return post;\n}\n\n\n\nfunction wrapAll( tweets ) {\n  log.trace( 'Wrapping %d tweets to posts', tweets.length );\n  let wrapped = tweets.map( wrap );\n  let filtered = wrapped.filter( t => t.location );\n  return filtered;\n}\n\n\nfunction* query( lat, lon, radius ) {\n  let geocode = `${lat},${lon},${radius}km`;\n  log.trace( 'Geocode: %s', geocode );\n\n  try {\n    let [ data ] = yield api.getAsync( 'search/tweets', { geocode, count: MAX_RESULTS } );\n    let tweets = data.statuses;\n    log.debug( 'Retrieved %d tweets', tweets.length );\n    return wrapAll( tweets );\n  } catch( err ) {\n    if( err.code===88 ) { // Rate limit reached\n      log.debug( 'Limit reached, waiting' );\n      yield Promise.delay( WINDOW );\n      return yield query( lat, lon, radius );\n    }\n\n    throw err;\n  }\n}\n\n\n// Module initialization (at first load)\napi = Promise.promisifyAll( api );\n\n\n// Entry point\n\n// Exports\nexport { query };\n\n//  50 6F 77 65 72 65 64  62 79  56 6F 6C 6F 78"],"sourceRoot":"/source/"}